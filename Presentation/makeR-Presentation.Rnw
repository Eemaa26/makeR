%\documentclass[handout]{beamer}
%\documentclass[handout,10pt,slidestop,mathserif]{beamer}
%\usepackage{pgfpages}
%\pgfpagesuselayout{2 on 1}
\documentclass[10pt,slidestop,mathserif,c]{beamer}
\usetheme{Madrid}
\usecolortheme{seahorse}

\usepackage{tabularx}
\usepackage{verbatim}
\usepackage{graphics}
\usepackage{graphicx}
\usepackage{Sweave}
\usepackage{moreverb}
\usepackage{pgf}
\usepackage{tikz}

\newcommand{\putat}[3]{\begin{picture}(0,0)(0,0)\put(#1,#2){#3}\end{picture}}
  
\newenvironment{changemargin}[2]{%
  \begin{list}{}{%
    \setlength{\topsep}{0pt}%
    \setlength{\leftmargin}{#1}%
    \setlength{\rightmargin}{#2}%
    \setlength{\listparindent}{\parindent}%
    \setlength{\itemindent}{\parindent}%
    \setlength{\parsep}{\parskip}%
  }%
  \item[]}{\end{list}}

%% Define a new 'leo' style for the package that will use a smaller font.
\makeatletter
\def\url@leostyle{%
  \@ifundefined{selectfont}{\def\UrlFont{\sf}}{\def\UrlFont{\tiny\ttfamily}}}
\makeatother

\title[makeR Package]{Using the \texttt{makeR} Package for Managing Document Building and Versioning}
\subtitle{}
\author[Jason Bryer]{Jason M. Bryer}
\institute[jbryer.github.com]{University at Albany\\Excelsior College\\\url{jbryer.github.com/makeR}\\jason@bryer.org}
\date[useR! Conference - Jun 14, 2012]{June 14, 2012\\useR! Conference 2012\\Vanderbilt University\\Nashville, TN}

\begin{document}
\SweaveOpts{concordance=FALSE}

<<echo=FALSE,results=hide>>=
options(width=48)
options(digits=2)
options(continue="   ")
options(warn=-1)
require(makeR)
setAutoOpen(FALSE)
@

\frame{\titlepage}
\frame{\frametitle{Agenda}\tableofcontents[hideallsubsections]}

\section{Overview}

\begin{frame}[fragile]
	\frametitle{Motivation}
	\begin{itemize}
	\item Need to create reports on a regular bases (i.e. montly, quarterly, yearly).
	\item The only difference from report-to-report tend to be date ranges and other easily abstracted data elements.
	\end{itemize}
	\pause
	There are tools and solutions such as:
	\begin{itemize}
	\item GNU make
	\item Batch files
	\item Java Ant
	\end{itemize}
	
	\pause
	However, there isn't a good solution implemented purely in R.
	
	\pause
	\ \\ \ \\
	And, since it took considerble effort to get my team to use R, introducing another program wasn't really an option!
\end{frame}

\begin{frame}[fragile]
	\frametitle{Goals and Workflow}
	The requirements include:
	\begin{itemize}
		\item Be implemented purely in R.
		\item Work on multiple platforms (i.e. Windows, Linux, and Mac).
		\item Maintain a history of ``released" versions.
	\end{itemize}
	\pause
	The workflow:
	\begin{itemize}[<+-| alert@+>]
		\item Define the project (once, subsequent sessions will restore state from an XML file)
		\item Define a new version (with the appropriate variables)
		\item Build
		\item Release
	\end{itemize}
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{makeR Package}
<<>>=
ls('package:makeR')
@
	\pause
	Demos
	\begin{itemize}
		\item \texttt{r-bloggers} This demo will create a new makeR project that will provide a summary of R-Bloggers
		\item \texttt{stocks} This demo will demostrate creating a custom builder that outputs PNG files.
		\item \texttt{makeR-knitr} This demo will use the knitr package for building.
	\end{itemize}
\end{frame}


\begin{frame}
	\frametitle{Package Structure}
	\begin{center}
		\includegraphics[width=\textwidth]{makeRClassDiagram.pdf}
	\end{center}
\end{frame}

\section{Sweave Example (R-Bloggers Demo)}
\begin{frame}[fragile,containsverbatim]
	\frametitle{R-Bloggers Example}
<<eval=FALSE>>=
myProject = Project(name="RBloggers", 
			projectDir=projectDir, 
			properties=list(
				email=email, 
				passwd=passwd))
@
\pause
<<eval=FALSE>>=
myProject$newVersion(name='2011-12', properties=list(
			startDate='2011-12-01', endDate='2011-12-31'))
@
\pause
<<eval=FALSE>>=
myProject$build()
@
\pause
<<eval=FALSE>>=
myProject$release()
@
\end{frame}

\begin{frame}
	\frametitle{R-Bloggers Example Result}
	\begin{center}
		\includegraphics[width=.7\textwidth]{rbloggers.png}
	\end{center}
\end{frame}

\section{Extensibility (Stocks Demo)}

\begin{frame}[fragile,containsverbatim]
	\frametitle{Customer Builders}
	
<<eval=TRUE>>=
builder.png <- function(project, theenv, ...) {
	sourceFile = ifelse(is.null(project$SourceFile), '.r$', 
						project$SourceFile)
	wd = eval(getwd(), envir=theenv)
	files = list.files(path=wd, 
					   pattern=sourceFile, 
					   ignore.case=TRUE)
	for(i in seq_len(length(files))) {
		cat(paste("Executing ", files[i], "...", sep=''))
		sys.source(files[i], envir=theenv)
	}
	return(list.files(path=wd, pattern=".png$", 
					  ignore.case=TRUE))
}
@
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{Customer Builders}
<<echo=FALSE,results=hide>>=
pkgdir = system.file(package='makeR')
#projectDir = paste(getwd(), '/demo/stocksDemo', sep='')
projectDir = tempdir()
unlink(projectDir, force=TRUE, recursive=TRUE)
dir.create(paste(projectDir, '/source', sep=''), showWarnings=FALSE, recursive=TRUE)
file.copy(paste(pkgdir, '/stocks/stocks.R', sep=''), 
		  paste(projectDir, '/source/stocks.R', sep=''))
@
<<>>=
stocksProject = Project(name="stocks", 
projectDir=projectDir, properties=list(
	src = "yahoo", stocks = c("GOOG",'AAPL','AMZN','MSFT','FB')))
@

<<>>=
stocksProject$newVersion(name='2012-05', 
		properties=list(month='2012-05'))
@

\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{Custom Builders (cont.)}
<<>>=
stocksProject
@
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{Custom Builders (cont.)}
<<>>=
stocksProject$build(builder=builder.png)
@

<<>>=
stocksProject$release(version='2012-05')
@
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{Stocks Example Result}
	\begin{center}
<<echo=FALSE,results=tex>>=
fname = substr(stocksProject$getReleases()[1], 1, nchar(stocksProject$getReleases()[1]) - 4)
fext = substr(stocksProject$getReleases()[1], nchar(stocksProject$getReleases()[1]) - 3, nchar(stocksProject$getReleases()[1]))
cat(paste('\\includegraphics[width=.7\\textwidth]{',
		  '{', projectDir, '/', stocksProject$ReleaseDir, '/', 
		  fname, '}', fext, '}', sep=''))
@

	\end{center}
\end{frame}

\section{Customizing makeR}
\begin{frame}[fragile,containsverbatim]
	\frametitle{Customizine makeR}
	
	\begin{itemize}[<+-| alert@+>]
		\item \texttt{getDefaultBuilder} \& \texttt{setDefaultBuilder} \\
		Returns and sets the default builder for the current R session.
		\item \texttt{getAutoOpen} \& \texttt{setAutoOpen} \\
		\texttt{makeR} will, by default, attempt to open the built or released file using the default application for the file type (e.g. PDF, TIFF, etc.)
		\item \texttt{getAutoSave} \& \texttt{setAutoSave} \\
		\texttt{makeR} saves project state in an XML file. If you wish to not save the XML file automatically, you can set this to FALSE. For example, you could save the project state to an RData file.
	\end{itemize}
\end{frame}

\section{Debugging Projects}
\begin{frame}[fragile,containsverbatim]
	\frametitle{Debegging}
<<>>=
stocksProject$Versions[[1]]$assignProperties()
@
\end{frame}

\section{The XML File}
\begin{frame}[fragile,containsverbatim]
	\frametitle{The \texttt{makeR} XML File}
\begin{verbatim}
<?xml version="1.0"?>
<project name="stocks" buildDir="build" releaseDir="release" 
    sourceDir="source">
  <property name="src" type="character">
    <value>yahoo</value>
  </property>
  <property name="stocks" type="character">
    <value>GOOG</value>
    <value>AAPL</value>
    <value>AMZN</value>
    <value>MSFT</value>
  </property>
  ...
\end{verbatim}
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{The \texttt{makeR} XML File (cont.)}
\begin{verbatim}
  ...
  <versions>
    <version name="2011-12" major="1" minor="1">
      <property name="month" type="character">
        <value>2011-12</value>
      </property>
    </version>
  </versions>
  ...
\end{verbatim}
\end{frame}

\begin{frame}[fragile,containsverbatim]
	\frametitle{The \texttt{makeR} XML File (cont.)}
\begin{verbatim}
  ...
  <builds>
    <build major="1" minor="0" build="1" name="2011-12" 
        timestamp="Thu Jan 26 20:55:10 2012"
        R="R version 2.14.0 (2011-10-31)" 
        platform="x86_64-apple-darwin9.8.0"
      nodename="Jason-Bryers-MacBook-Air-2.local" user="jbryer">
      <file>2011-12.png</file>
    </build>
  </builds>
</project>
\end{verbatim}
\end{frame}

\begin{frame}
	\frametitle{Future Directions}
	\begin{itemize}
	\item Provide hooks into the release process. 
	\item Provide helper functions for scheduled runs.
	\item Allow properties to be assigned interactively at runtime instead of saved in the XML file (e.g. passwords).
	\item Builder for R Markdown.
	\end{itemize}
\end{frame}

\begin{frame}[c]
	\LARGE{Thank You}\\
	\normalsize
	Jason Bryer (jason@bryer.org)\\
	\url{http://jbryer.github.com}
\end{frame}

\begin{frame}[fragile,containsverbatim,shrink=5]
	\frametitle{Session Info}
<<echo=FALSE>>=
sessionInfo()
unlink(projectDir, recursive=TRUE)
@
\end{frame}

\end{document}
